% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hhh4_new.R
\name{profile_par_lag}
\alias{profile_par_lag}
\title{Estimating the lag decay parameter of an \code{hhh4_lag} model using profile likelihood}
\usage{
profile_par_lag(
  stsObj,
  control,
  start_par_lag = NULL,
  lower_par_lag = -10,
  upper_par_lag = 10,
  return_full_cov = FALSE,
  reltol_par_lag = 1e-08,
  check.analyticals = FALSE
)
}
\arguments{
\item{stsObj, control, check.analyticals}{As in \code{surveillance::hhh4}, but \code{control}
allows for some additional arguments in order to specify a distributed lag structure:
\itemize{
  \item{\code{funct_lag}}{ Function to compute the lag weights \eqn{u_q} (see details) depending on a scalar
  parameter \code{par_lag}. The function has to take the
  following arguments:
  \itemize{
  \item{\code{par_lag}}{ A scalar parameter to steer \eqn{u_q}. It should be specified in a way which allows it to
  take any value in the real numbers}
  \item{\code{min_lag,max_lag}}{ Minimum and maximum lags; e.g. \code{min_lag = 3, max_lag = 6} will assign all weights to lags 3 through 6.
  Usually \code{min_lag} is set to 1, higher values can be useful for direct forecasting at higher horizons.}
  }}
  \item{\code{min_lag, max_lag}}{ Specification of the arguments passed to funct_lag} to compute the distributed lags. Unlike in
  \code{hhh4_lag}, \code{par_lag} is not to be specified as it is estimated from the data.
  Important: the first element of the \code{subset} argument in \code{control} needs to be larger than
  \code{max_lag} (as for the first \code{max_lag} observations the fitted values canot be computed)
}}

\item{start_par_lag}{A starting value for \code{par_lag}}

\item{lower_par_lag, upper_par_lag}{lower and upper limits for the value of par_lag; defaults to -10, 10}

\item{return_full_cov}{logical: should the full covariance matrix of the parameter estimates (including \code{par_lag})
be obtained numerically?}

\item{reltol_par_lag}{the relative tolerance passed to the \code{optim} call to identify \code{par_lag}}
}
\value{
If \code{return_full_cov == FALSE}: an \code{hhh4_lag} object. If \code{return_full_cov == TRUE} A list with two
elements: \code{best_mod} is the \code{hhh4_lag} fit for the best value of \code{par_lag}; \code{cov} is an extended covariance matrix for the regression parameters
which also includes par_lag.
}
\description{
Wrapper around \code{hhh4_lag} to allow for profile likelihood estimation of the scalar parameter
governing the lag structure. \code{hhh4_lag} can fit models with fixed lag decay parameter; \code{profile_par_lag}
re-fits the model for different values of \code{par_lag} and finds the optimal value. See \code{?hhh4_lag} for details.
NOTE: \code{fit_par_lag} serves essentially the same purpose, but is based on a grid of potential values for
\code{par_lag} rather than optimization using \code{optim}. \code{profile_par_lag} is the recommended option, but
\code{fit_par_lag} may be somethat quicker for complex models.
}
\details{
The standard \code{hhh4} function only allows for models with
first lags i.e. of the form
\deqn{mu_{it} = \lambda_{it}X_{i, t - 1} + \phi_{it}\sum_{j != i}w_{ji}X_{j, t - 1} + \nu_{it},}
see \code{?hhh4}. The extension \code{hhh4_lag} allows to specify
models of the form
\deqn{mu_{it} = \lambda_{it}\sum_{q= 1}^Q u_q X_{i, t - q} + \phi_{it}\sum_{j\neq i}sum_{q= 1}^Q w_{ji}u_q X_{j, t - q} + \nu_{it}.}
Here the first lags are now replaced by weighted sums of the Q
previous observations. The weights u_q, q = 1, ..., Q sum up to
1 and need to be parametrizable by a single scalar parameter. The value of this parameter needs to be passed as \code{control$par_lag}.
Moreover, a function to obtain a vector of weights from \code{par_lag} needs to be provided in \code{control$funct_lag}.
Currently several such functions are implemented in the package:
\itemize{
\item{Geometric lags (function \code{geometric_lag}; the default).
These are specified as
\deqn{u0_q = \alpha * (1 - \alpha)^{q - 1}}
and \eqn{u_q = u0_q / sum_{q = 1}^Q u0_q}  for \eqn{q = 1, ..., Q}. The \code{par_lag} parameter corresponds to logit(\eqn{\alpha}),
i.e. the un-normalized weight of the first lag.}
\item{Poisson lags (function \code{poisson_lag}).
These are specified as
\deqn{u0_q =  \alpha^(q - 1)\exp(-\alpha)/(q - 1)!,}
and \eqn{u_q = u0_q / sum_{q = 1}^Q u0_q} for \eqn{q = 1, ..., Q}. Note that he Poisson distribution is shifted by one to
achieve a positive support. The \code{par_lag} parameter corresponds to log(\eqn{\alpha}).}
\item{Linearly decaying weights (in function \code{linear_lag}).
These are specified as
\deqn{u0_q = max(1 - mq, 0)}
and \eqn{u_q = u0_q / sum_{q = 1}^Q u0_q} for \eqn{q = 1, ..., Q}.
The \code{par_lag} parameter corresponds to logit(\eqn{m}).}
\item{A weighting only between first and second lags (in function \code{ar2lag}), i.e.
\deqn{u_1 = \alpha, u_2 = 1 - \alpha.}
The \code{par_lag} parameter corresponds to logit(\eqn{\alpha}).}}
\item{Unrestricted lag can be fitted using \code{unrestricted_lag}. These are parameterized via
 a multinomial logit transformation where the first lag is the reference category.}
 \item{Discrete Weibull lags are implemented in \code{discrete_weibull_lag}, see details there.}
 \item{Discrete gamma lags are implemented in \code{discrete_gamma_lag}, see details there.}
 \item{Discretized log-normal lags are implemented in \code{log_normal_lag}, see details there.}
Users can specify their own weighting functions as long as they take the arguments described above and return a vector of weights.
}
\examples{
## a simple univariate example:
data("salmonella.agona")
## convert old "disProg" to new "sts" data class
salmonella <- disProg2sts(salmonella.agona)
# specify and fit model: fixed geometric lag structure
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
                           ar = list(f = addSeason2formula(~ 1)),
                           family = "NegBinM", subset = 6:312)
fit_salmonella <- profile_par_lag(salmonella, control_salmonella)
summary(fit_salmonella)
# 0.56 on first lag
#
# re-fit with Poisson lags:
control_salmonella2 <- control_salmonella
control_salmonella2$funct_lag = poisson_lag
fit_salmonella2 <- profile_par_lag(salmonella, control_salmonella2)
summary(fit_salmonella2)
# leads to somewhat different decay and very slightly better AIC

}
\seealso{
\code{hhh4_lag} for fitting models with fixed \code{par_lag}; \code{fit_par_lag} for grid-based optimization.
}
