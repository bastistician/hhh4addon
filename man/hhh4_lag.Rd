% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hhh4_new.R
\name{hhh4_lag}
\alias{hhh4_lag}
\title{Fitting hhh4 models with distributed lags}
\usage{
hhh4_lag(
  stsObj,
  control = list(ar = list(f = ~-1, offset = 1, lag = NA), ne = list(f = ~-1, offset = 1,
    lag = NA, weights = neighbourhood(stsObj) == 1, scale = NULL, normalize = FALSE), end
    = list(f = ~1, offset = 1), family = c("Poisson", "NegBin1", "NegBinM"), funct_lag =
    geometric_lag, par_lag = 1, min_lag = 1, max_lag = 5, subset = 6:nrow(stsObj),
    optimizer = list(stop = list(tol = 1e-05, niter = 100), regression = list(method =
    "nlminb"), variance = list(method = "nlminb")), verbose = FALSE, start = list(fixed =
    NULL, 
     random = NULL, sd.corr = NULL), data = list(t = stsObj@epoch -
    min(stsObj@epoch)), keep.terms = FALSE),
  check.analyticals = FALSE
)
}
\arguments{
\item{stsObj, control, check.analyticals}{As in \code{surveillance::hhh4},
but with the following additional elements in the \code{control} argument in order to specify a distributed lag structure:
\itemize{
  \item{\code{funct_lag}}{ Function to compute the lag weights \eqn{u_q} (see details) depending on a scalar
  parameter \code{par_lag}. The function has to take the
  following arguments:
  \itemize{
  \item{\code{par_lag}}{ A scalar parameter to steer \eqn{u_q}. It should be specified in a way which allows it to
  take any value in the real numbers}
  \item{\code{min_lag,max_lag}}{ Minimum and maximum lags; e.g. \code{min_lag = 3, max_lag = 6} will assign all weights to lags 3 through 6.
  Usually \code{min_lag} is set to 1, higher values can be useful for direct forecasting at higher horizons.}
  }}
  \item{\code{par_lag, min_lag, max_lag}}{ Specification of the arguments
  passed to funct_lag} to compute the distributed  lags.
  Important: the first element of the \code{subset} argument in \code{control} needs to be larger than
  \code{max_lag} (as for the first \code{max_lag} observations the fitted values canot be computed)
}
\code{hhh4_lag} requires \code{par_lag} to be pre-specified (with a default of 1). Using the wrappers \code{profile_par_lag} and \code{fit_par_lag} it can also be estimated using a profile
likelihood approach.}
}
\description{
A modified version of \code{surveillance::hhh4} to allow for distributed
lags. Usually used from inside of the wrappers \code{profile_par_lag} or \code{fit_par_lag}.
}
\details{
The standard \code{hhh4} function only allows for models with
first lags i.e. of the form
\deqn{mu_{it} = \lambda_{it}X_{i, t - 1} + \phi_{it}\sum_{j != i}w_{ji}X_{j, t - 1} + \nu_{it},}
see \code{?hhh4}. The extension \code{hhh4_lag} allows to specify
models of the form
\deqn{mu_{it} = \lambda_{it}\sum_{q= 1}^Q u_q X_{i, t - q} + \phi_{it}\sum_{j\neq i}sum_{q= 1}^Q w_{ji}u_q X_{j, t - q} + \nu_{it}.}
Here the first lags are now replaced by weighted sums of the Q
previous observations. The weights u_q, q = 1, ..., Q sum up to
1 and need to be parametrizable by a single scalar parameter. The value of this parameter needs to be passed as \code{control$par_lag}.
Moreover, a function to obtain a vector of weights from \code{par_lag} needs to be provided in \code{control$funct_lag}.
Currently four such functions are implemented in the package:
\itemize{
\item{Geometric lags (function \code{geometric_lag}; the default).
These are specified as
\deqn{u0_q = \alpha * (1 - \alpha)^{q - 1}}
and \eqn{u_q = u0_q / sum_{q = 1}^Q u0_q}  for \eqn{q = 1, ..., Q}. The \code{par_lag} parameter corresponds to logit(\eqn{\alpha}),
i.e. the un-normalized weight of the first lag.}
\item{Poisson lags (function \code{poisson_lag}).
These are specified as
\deqn{u0_q =  \alpha^(q - 1)\exp(-\alpha)/(q - 1)!,}
and \eqn{u_q = u0_q / sum_{q = 1}^Q u0_q} for \eqn{q = 1, ..., Q}. Note that he Poisson distribution is shifted by one to
achieve a positive support. The \code{par_lag} parameter corresponds to log(\eqn{\alpha}).}
\item{Linearly decaying weights (in function \code{linear_lag}).
These are specified as
\deqn{u0_q = max(1 - mq, 0)}
and \eqn{u_q = u0_q / sum_{q = 1}^Q u0_q} for \eqn{q = 1, ..., Q}.
The \code{par_lag} parameter corresponds to logit(\eqn{m}).}
\item{A weighting only between first and second lags (in function \code{ar2lag}), i.e.
\deqn{u_1 = \alpha, u_2 = 1 - \alpha.}
The \code{par_lag} parameter corresponds to logit(\eqn{\alpha}).}}
Users can specify their own weighting functions as long as they take the arguments described above and return a vector of weights.
}
\examples{
## a simple univariate example:
data("salmonella.agona")
## convert old "disProg" to new "sts" data class
salmonella <- disProg2sts(salmonella.agona)
# specify and fit model: fixed geometric lag structure
# with weight 0.8 for first lag
# par_lag is the logit of alpha:
par_lag <- log(0.8/(1 - 0.8))
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
                           ar = list(f = addSeason2formula(~ 1)),
                           family = "NegBinM", subset = 6:312,
                           par_lag = par_lag)
fit_salmonella <- hhh4_lag(salmonella, control_salmonella)
summary(fit_salmonella)
# has indeed weight 0.8 on first lag
#
# re-fit with Poisson lags:
par_lag2 <- log(1.2)
control_salmonella2 <- control_salmonella
control_salmonella2$funct_lag = poisson_lag
control_salmonella2$par_lag <- par_lag2
fit_salmonella2 <- hhh4_lag(salmonella, control_salmonella2)
summary(fit_salmonella2)
# the Poisson lag actually allows you to put more weight on
# the second than on the first lag.

}
\seealso{
\code{profile_par_lag} and \code{fit_par_lag} estimate \code{par_lag} in a profiling procedure. \code{profile_par_lag} is the
recommended function, \code{fit_par_lag} may be quicker for complex models.
}
